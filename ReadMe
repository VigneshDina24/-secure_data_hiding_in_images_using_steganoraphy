I’ve put together an encrypted image using steganography.

The secret code: Dreams aren't just those that come while you sleep; they're the ones that keep you awake. The **passkey** for this project is dreams0001.

Secure Data Hiding in Images Using Steganography:

Overview  
This project showcases **image-based steganography**, which involves hiding a secret message within an image at the pixel level. You can later decrypt the message using a valid passkey.

Features  
- Conceal a secret message inside an image  
- Encrypt the message by altering pixel values  
- Decrypt the message only with the correct passkey  
- Utilizes **OpenCV** for image processing  

Project Structure  


Secure_Data_Hiding_In_Images_Using_Steganography
│── 📄 secure_data_hiding.py  # Main script
│── 🖼 Image.jpg              # Original image (used for encoding)
│── 🖼 encryptedImage.jpg     # Encrypted image (generated)
│── 📄 README.md              # Documentation


Installation & Setup  
1️ Prerequisites: 
- Install Python (version 3.7 or higher)  
- Use pip to install **OpenCV**:
 
  pip install opencv-python
  

2️ Running the Script  
1. Put the image you want to use as a carrier (`Image.jpg`) into the project folder.  
2. Open a terminal and run:
  
   python secure_data_hiding.py
  
3. When prompted, enter the secret message and passkey.  
4. The script will create 'encryptedImage.jpg' containing the hidden message.  
5. Run the script again and input the correct passkey to decrypt the message.

'How It Works'  
1. Encoding:  
   - The script opens an image using OpenCV.  
   - Each character of the secret message is converted into a pixel value.  
   - Pixels are altered in a **non-sequential** pattern to store the information.

2. Decoding:  
   - If the correct passkey is provided, the script reads the pixel values and reconstructs the original message.

⚠ Limitations 
🔹 Best used with 'uncompressed image formats' (like '.png' or '.bmp').  
🔹 'JPEG compression' can change pixel values and impact decryption.  
🔹 The length of the message is restricted by the image size.  

Example Usage  

Encryption

- Secret Code To Unlock: hello123  
- Enter The Passkey: secret12  
- The message is now concealed inside `encryptedImage.jpg`.

Decryption  

- Enter passcode for Decryption: secret123  
- Decrypted message: hello123  
- Message successfully retrieved!

Security Considerations

- The encryption here is straightforward and doesn’t employ cryptographic methods.  
- For better security, you might want to use **AES encryption** on the message before embedding it into the image.
